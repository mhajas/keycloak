name: Keycloak CI

on:
  push:
    branches-ignore:
      - main
      - dependabot/**
  pull_request:
  workflow_dispatch:

env:
  MAVEN_ARGS: "-B -nsu -Daether.connector.http.connectionMaxTtl=25"
  SUREFIRE_RERUN_FAILING_COUNT: 2
  SUREFIRE_RETRY: "-Dsurefire.rerunFailingTestsCount=2"

concurrency:
  # Only cancel jobs for PR updates
  group: ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:

  conditional:
    name: Check conditional workflows and jobs
    runs-on: ubuntu-latest
    outputs:
      ci: ${{ steps.conditional.outputs.ci }}
      ci-quarkus: ${{ steps.conditional.outputs.ci-quarkus }}
      ci-store: ${{ steps.conditional.outputs.ci-store }}
      ci-sssd: ${{ steps.conditional.outputs.ci-sssd }}
      ci-webauthn: ${{ steps.conditional.outputs.ci-webauthn }}
      ci-test-poc: ${{ steps.conditional.outputs.ci-test-poc }}
      ci-aurora: ${{ steps.auroradb-tests.outputs.run-aurora-tests }}

    steps:
      - uses: actions/checkout@v4

      - id: conditional
        uses: ./.github/actions/conditional
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: AuroraDB conditional check
        id: auroradb-tests
        run: |
          RUN_AURORADB_TESTS=false
          if [[ $GITHUB_EVENT_NAME != "pull_request" && -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]]; then
            RUN_AURORADB_TESTS=true
          fi
          echo "run-aurora-tests=$RUN_AURORADB_TESTS" >> $GITHUB_OUTPUT

  build:
    name: Build
    if: needs.conditional.outputs.ci == 'true'
    runs-on: ubuntu-latest
    needs: conditional
    steps:
      - uses: actions/checkout@v4

      - name: Build Keycloak
        uses: ./.github/actions/build-keycloak

  auroradb-integration-tests:
    name: AuroraDB IT
    needs: conditional
    if: needs.conditional.outputs.ci-aurora == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 150
    steps:
      - uses: actions/checkout@v4

      - id: aurora-init
        name: Initialize Aurora environment
        run: |
          AWS_REGION=us-east-1
          echo "AWS Region: ${AWS_REGION}"
          
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${AWS_REGION}
          
          AURORA_CLUSTER_NAME="gh-action-$(git rev-parse --short HEAD)-${{ github.run_id }}-${{ github.run_attempt }}"
          PASS=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13; echo)
          echo "::add-mask::${PASS}"
          
          echo "aurora-cluster-name=${AURORA_CLUSTER_NAME}" >> $GITHUB_OUTPUT
          echo "aurora-cluster-password=${PASS}" >> $GITHUB_OUTPUT
          echo "region=${AWS_REGION}" >> $GITHUB_OUTPUT
          
          PROPS="-Dauth.server.db.host=${AURORA_CLUSTER_NAME}"
          
          curl --fail-with-body https://truststore.pki.rds.amazonaws.com/${AWS_REGION}/${AWS_REGION}-bundle.pem -o aws.pem
          PROPS+=" -Dkeycloak.connectionsJpa.jdbcParameters=\"?ssl=true&sslmode=verify-ca&sslrootcert=/opt/keycloak/aws.pem\""
          
          echo "maven_properties=${PROPS}" >> $GITHUB_OUTPUT

      - id: aurora-create
        name: Create Aurora DB
        uses: ./.github/actions/aurora-create-database
        with:
          name: ${{ steps.aurora-init.outputs.aurora-cluster-name }}
          password: ${{ steps.aurora-init.outputs.aurora-cluster-password }}
          region: ${{ steps.aurora-init.outputs.region }}

      - id: ec2-create
        name: Create EC2 runner instance
        run: |
          AWS_REGION=${{ steps.aurora-init.outputs.region }}
          EC2_CLUSTER_NAME=keycloak_$(git rev-parse --short HEAD)
          echo "ec2_cluster=${EC2_CLUSTER_NAME}" >> $GITHUB_OUTPUT
          
          git archive --format=zip --output /tmp/keycloak.zip $GITHUB_REF
          zip -u /tmp/keycloak.zip aws.pem
          zip -ur /tmp/keycloak.zip .git
          
          cd .github/scripts/ansible
          ./aws_ec2.sh requirements
          ./aws_ec2.sh create ${AWS_REGION} ${EC2_CLUSTER_NAME}
          ./keycloak_ec2_installer.sh ${AWS_REGION} ${EC2_CLUSTER_NAME} /tmp/keycloak.zip
          ./mvn_ec2_runner.sh ${AWS_REGION} ${EC2_CLUSTER_NAME} "clean install -B -DskipTests -Pdistribution"
          ./mvn_ec2_runner.sh ${AWS_REGION} ${EC2_CLUSTER_NAME} "clean install -B -DskipTests -pl testsuite/integration-arquillian/servers/auth-server/quarkus -Pauth-server-quarkus -Pdb-aurora-postgres -Dmaven.build.cache.enabled=true"

      - name: Run Aurora migration tests on EC2
        id: aurora-migration-tests
        env:
          old-version: 24.0.4
        run: |
          EC2_CLUSTER_NAME=${{ steps.ec2-create.outputs.ec2_cluster }}
          AWS_REGION=${{ steps.aurora-init.outputs.region }}
          PROPS="${{ steps.aurora-init.outputs.maven_properties }}"
          
          PROPS+=" -Dkeycloak.connectionsJpa.password=${{ steps.aurora-init.outputs.aurora-cluster-password }}"
          PROPS+=" -Djdbc.mvn.groupId=software.amazon.jdbc -Djdbc.mvn.artifactId=aws-advanced-jdbc-wrapper -Djdbc.mvn.version=2.3.1 -Djdbc.driver.tmp.dir=target/unpacked/keycloak-${{ env.old-version }}/providers"

          cd .github/scripts/ansible
          ./mvn_ec2_runner.sh ${AWS_REGION} ${EC2_CLUSTER_NAME} "clean install -X ${{ env.SUREFIRE_RETRY }} -Pauth-server-quarkus -Pdb-aurora-postgres -Pauth-server-migration $PROPS -Dtest=MigrationTest -Dmigration.mode=auto -Dmigrated.auth.server.version=${{ env.old-version }} -Dmigration.import.file.name=migration-realm-${{ env.old-version }}.json -Dauth.server.ssl.required=false -f testsuite/integration-arquillian/pom.xml 2>&1 | misc/log/trimmer.sh"

          # Copy returned surefire-report directories to workspace root to ensure they're discovered
          results=(files/keycloak/results/*)
          rsync -a $results/* ../../../

          rm -rf $results

      - name: Upload JVM Heapdumps
        if: always()
        uses: ./.github/actions/upload-heapdumps

      - uses: ./.github/actions/upload-flaky-tests
        name: Upload flaky tests
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          job-name: AuroraDB IT

      - name: Surefire reports
        if: always()
        uses: ./.github/actions/archive-surefire-reports
        with:
          job-id: migration-tests-${{ env.old-version }}-aurora-postgres

      - name: EC2 Maven Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: auroraDB-migration-tests-mvn-logs
          path: .github/scripts/ansible/files

      - name: Run Aurora integration tests on EC2
        id: aurora-integration-tests
        run: |
          EC2_CLUSTER_NAME=${{ steps.ec2-create.outputs.ec2_cluster }}
          AWS_REGION=${{ steps.aurora-init.outputs.region }}
          PROPS="${{ steps.aurora-init.outputs.maven_properties }}"          
          PROPS+=" -Dkeycloak.connectionsJpa.password=${{ steps.aurora-init.outputs.aurora-cluster-password }}"
          
          TESTS=`testsuite/integration-arquillian/tests/base/testsuites/suite.sh database`
          echo "Tests: $TESTS"
          
          cd .github/scripts/ansible
          ./mvn_ec2_runner.sh ${AWS_REGION} ${EC2_CLUSTER_NAME} "test -B ${{ env.SUREFIRE_RETRY }} -Pauth-server-quarkus -Pdb-aurora-postgres $PROPS -Dtest=$TESTS -pl testsuite/integration-arquillian/tests/base 2>&1 | misc/log/trimmer.sh"
          
          # Copy returned surefire-report directories to workspace root to ensure they're discovered
          results=(files/keycloak/results/*)
          rsync -a $results/* ../../../
          rm -rf $results

      - name: Upload JVM Heapdumps
        if: always()
        uses: ./.github/actions/upload-heapdumps

      - uses: ./.github/actions/upload-flaky-tests
        name: Upload flaky tests
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          job-name: AuroraDB IT

      - name: Surefire reports
        if: always()
        uses: ./.github/actions/archive-surefire-reports
        with:
          job-id: aurora-integration-tests

      - name: EC2 Maven Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: aurora-integration-tests-mvn-logs
          path: .github/scripts/ansible/files

      - name: Delete EC2 Instance
        if: always()
        working-directory: .github/scripts/ansible
        run: |
          ./aws_ec2.sh delete ${{ steps.aurora-init.outputs.region }} ${{ steps.ec2-create.outputs.ec2_cluster }}

      - name: Delete Aurora DB
        if: always()
        run: |
          gh workflow run aurora-delete.yml \
            -f name=${{ steps.aurora-init.outputs.aurora-cluster-name }} \
            -f region=${{ steps.aurora-init.outputs.region }} \
            --repo ${{ github.repository }} \
            --ref ${{ github.ref_name }}
        env:
          GH_TOKEN: ${{ github.token }}